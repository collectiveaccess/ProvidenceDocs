Type of Refinery Parameter,Parameter Notes,Example
delimiter,"Sets the value of the delimiter to break on, separating data source values","{""delimiter"": "";""}"
relationshipType,Accepts a constant type code for the relationship type or a reference to the location in the data source where the type can be found,"{""relationshipType"": ""^10""} or {""relationshipType"": ""author""}"
entityType,Accepts a constant list item idno from the list entity_types or a reference to the location in the data source where the type can be found,"{""entityType"": ""individual""}"
attributes,Sets or maps metadata for the entity record by referencing the metadataElement code and the location in the data source where the data values can be found,"{
   ""attributes"": {
       ""address"": {
           ""address1"": ""^24"",
           ""address2"": ""^25"",
           ""city"": ""^26"",
           ""stateprovince"": ""^27"",
           ""postalcode"": ""^28"",
           ""country"": ""^29""
       }
   }
}"
attributes,"To map source data to idnos in an entitySplitter, see the 'attributes' parameter above. An exception exists for when idnos are set to be auto-generated. To create auto-generated idnos within an entitySplitter, use the following syntax.","""attributes"": {""idno"":""%""}"
relationshipTypeDefault,Sets the default relationship type that will be used if none are defined or if the data source values don't match any values in the CollectiveAccess system,"{""relationshipTypeDefault"":""creator""}"
entityTypeDefault,Sets the default entity type that will be used if none are defined or if the data source values do not match any values in the CollectiveAccess list entity_types,"{""entityTypeDefault"":""individual""}"
interstitial ,Sets or maps metadata for the interstitial movement Relationship record by referencing the metadataElement code and the location in the data source where the data values can be found.,"{
   ""interstitial"": {
       ""relationshipDate"": ""^4""
   }
}"
relatedEntities,"This allows you to create and/or relate additional entities to the entity being mapped. For example, if you are running an Object mapping and using an entitySplitter to generate related Individuals, but you also want to create entity records for each individual's affiliation, use this setting. ""Name"" is the name of the entity, which will be automatically split into pieces and imported. If you want to explicitly map pieces of a name (surname, forename) you can omit ""name"" and use ""forename"", ""middlename"", ""surname"", etc. ""type"", ""attributes,"" and ""relationshipType"" operate just as they would in a regular splitter.From version 1.5 this is now deprecated in favor of the 'relationships' setting.","{""relatedEntities"": [{""type"":""ind"", ""name"": ""^3"", ""attributes"":{}, ""relationshipType"":""related""}]}"
nonPreferredLabels,Maps source data cells to ca_entities.nonpreferred_labels of the entity being generated or matched by the entitySplitter,"""nonPreferredLabels"": [{""forename"": ""^5"", ""surname"":""^6""}]"
parents,"Builds hierarchical records above the entity being generated or matched by the entitySplitter. The parent parameter has several sub-parameters including:

idno: maps the level-specific idno

name: maps the level-specific preferred_label

type: maps the level-specific record type (must match the item idno exactly)

attributes: maps the (optional) level-specific metadata. Includes the metadataElement code and the data source.

rules: maps any (optional) level-specific rules","{
   ""parents"": [
       {
           ""idno"": ""^5"",
           ""name"": ""^6"",
           ""type"": ""organization"",
           ""attributes"": {
               ""ca_entities.description"": ""^7""
           }
       }
   ]
}"
skipIfValue,Skip if imported value is in the specified list of values.,"{""skipIfValue"": ""unknown""}"
relationships,From version 1.5. A list of relationships using the relevant splitter refineries. The settings for this item reflect the settings used for the relevant splitter refinery. The only additional setting here is relatedTable which is a required value.," {
    ""relationships"" : [
     {
      ""relatedTable"": ""ca_objects"",
      ""type"" : ""moving_image"",
      ""relationshipType"": ""creator"",
      ""preferredLabel"": ""^7"",
      ""attributes"" : {
       ""technique"" : ""^10""
      }
     },
     {
      ""relatedTable"": ""ca_entities"",
      ""type"" : ""individual"",
      ""relationshipType"": ""parent"",
      ""preferredLabels"" : [{""forename"": ""^5"", ""surname"":""^6""}],
      ""attributes"" : {
       ""gender"" : ""^33""
      }
     }
    ]
   }"
matchOn,"From version 1.5. Defines exactly how the splitter will establish matches with pre-existing records. For example, you might be importing a data set in which entities are only listed by last name, but you want to make sure those entities merge with pre-existing records that include the full name. In that case, you could set ""matchOn"" to ""surname."" Or perhaps the data set includes multiple individuals with identical names. Here you might want to match on ""idno"" instead. You can also list multiple fields in the matchOn parameter, and it will try multiple matches in the order specified.","{""matchOn"": [""labels"", ""idno""]} -Will try to match on labels first, then idno.
{""matchOn"": [""idno"", ""labels""]} - Will do the opposite, first idno and then labels.
You can also limit matching by doing one or the other. Eg:
{""matchOn"": [""idno""]} will only match on idno.
{""matchOn"": [""surname""]} will only match on surname.
{""matchOn"": [""^ca_entities.your_custom_code""]} will match on a custom metadata element in the entity record. Use the syntax ^ca_entities.metadataElement code."
displaynameFormat,"From version 1.5. Allows you to format the output of the displayName. Options are: “surnameCommaForename” (forces display name to be surname, forename); “forenameCommaSurname” (forces display name to be forename, surname); “forenameSurname” (forces display name to be forename surname); “original” (is the same as leaving it blank; you just get display name set to the imported text). This option also supports an arbitrary format by using the sub-element codes in a template, i.e. “^surname, ^forename ^middlename”. Doesn't support full format templating with <unit> and <ifdef> tags, though.","{""displaynameFormat"": ""surnameCommaForename""}"
doNotParse,"From version 1.7. This setting will force the import to migrate an organization's name as is when using the ""entity_class"" = ORG setting. Otherwise parts of the name get lost in the parse.","{""doNotParse"": ""1""}"
dontCreate,From version 1.5. If set to true (or any non-zero value) the splitter will only do matching and will not create new records when matches are not found.,"{""dontCreate"": ""1""}"
ignoreParent,"From version 1.5. For use with entity hierarchies. When set to true this parameter allows global match across the entire hierarchy, regardless of parent_id. Use this parameter with datasets that include values to be merged into existing hierarchies but that do not include parent information. Paired with matchOn it's possible to merge the values using only name or idno, without any need for hierarchy info. Not ideal for situations where multiple matches can not be disambiguated with the information available.","{""ignoreParent"": ""1""}"